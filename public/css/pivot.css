body {
  box-sizing: border-box;
  margin: 0;
  padding: 5px;
  font-family: "Raleway","Alegreya Sans",sans-serif;
  font-size: 0px;
  text-decoration: none;
  height: 100%;
  width: 100%;
  text-align: center;
  font-weight: 100;
}
div, ol, ul, li, a, img, form, label, input, iframe, button {
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  /*float: left;*/
  margin: 0 0 0 0;
  padding: 0 0 0 0;
  /*height: 100%;  can't use this because setting it back to auto doesn't work when we need it*/
  /*width: 100%;*/
  background-position: center;
  background-size: cover;
  border: none;
  list-style: none;
  font-family: "Raleway","Alegreya Sans",sans-serif;
}
svg {
  width: 100%;
  height: 100%;
}
.button1Item,
label:hover,
button:hover,
input[type=submit]:hover,
.clickable1:hover:not(.disabled),
.clickable2:hover:not(.disabled),
.cursorPointer {
  cursor: pointer;
}

/*colors*/
#topNav a.icon > svg:hover,
.orange1 {
  fill: #fcb8a8;
}
#topNav svg,
.orange2 {
  fill: #ff876d;
}
#topNav .parrot svg,
.orange2 {
  fill: #fff;
  /*fill: #3798d4;*/
}
#topNav svg > path.forecolor,
.orange2 {
  /*fill: #fff;*/
  fill: #3798d4;
  fill: #444;
}

.button1Item:hover,
.details,
.button1 a[href]:hover,
a[href].button1:hover,
a[href]:hover,
.button1 a:not([href]),
a:not([href]).button1,
a:not([href]),
a:hover + a[style] + .electionName,
a:hover + .electionName,
a:hover,
/* .stepNavigator > a::after, */
button:hover,
input[type=submit]:hover,
.clickable1:hover:not(.disabled),
a[href].hover1,
.hover1,
.orange1 {
  background-color: #fcb8a8;
}
.textInput1,
.text3,
.bgNone {
  background: none;
}
/* .grabbable, */
.clickable1,
.button1Item,
.details,
button,
input[type=submit],
.clickable1,
.button1 a,
a.button1,
a,
.orange2 {
  background-color: #ff876d;
  /* border: 1px solid white;
  margin: 3px; */
}
.button1Item:active,
a[href]:active,
button:active,
input[type=submit]:active,
.clickable1:active,
.clickable2:active,
.clickable1.disabled,
.clickable2.disabled,
.opacity5 {
  opacity: .5;
}
.triggerHoverOpacity75:hover .hoverOpacity75,
.hoverOpacity75:hover {
  opacity: .75;
}

#topNav a:not([href]),
.hasLabelFrame::after,
#maincolumn,
.blue {
  background-color: #3798d4;
  background-image: url("https://www.transparenttextures.com/patterns/black-thread-light.png");
  background-size: auto;
}
.newitem,
.blue2 {
  background-color: #009faf;
}

.blue3 {
  background-color: #4dd0e1;
}
#topNav,
body,
.slate {
  background-color: #444;
}
.black {
  background-color: black;
}
.a1,
a.a1:hover,
.bgColorTransparent {
  background-color: transparent;
}
.electionName,
.text1,
.bgwhite {
  background-color: white;
}

.userDescription,
/* .candidateDescription, */
.grey1 {
  color: #5d5d5d;
}
.text4,
.background-color4 {
  background-color: #77dd76;
}
.electorChecks,
.red1 {
  color: #d53e3e;
}
.orange1 {
  color: #fcb8a8;
}
.clickable2:hover:not(.disabled),
.orange2 {
  color: #ff876d;
}
.blue {
  color: #3798d4;
}
.slate {
  color: #444;
}
.electionName,
.text1,
.black {
  color: black;
}
/* .stepNavigator > a[href], */
.button1Item,
.details,
button,
input[type=submit],
.clickable1,
.clickable2,
.button1 a,
a.button1,
a,
.text2,
.text4,
.textInput1,
#maincolumn,
.white {
  color: white;
}

/* basic layout */
#maincolumn {
  height: 100%;
  width: 100%;
  max-width: 1000px;
  border-radius: 6px;
  overflow: hidden;
  padding: 0 0 20px 0;
  margin: 5px 0 0 0;
  /*background-image: url("https://www.transparenttextures.com/patterns/black-thread-light.png");
  background-size: auto;*/
}
#topNav {
  width: 100%;
  /*text-align: right;*/
  /*padding: 5px;*/
}
.mainheader {
  width: 100%;
  padding: 20px;
  font-size: 30px;
  font-weight: 500;
  /* font-family: fantasy; */
  text-transform: uppercase;
}

/* cssremove3 */

/* ballot layout and skin */
.workspace {
  padding: 0 10px 0 10px;
  width: 100%;
}
#instructions {
  width: 100%;
  font-size: 20px;
}
.row1,
.w100 {
  width: 100%;
}
.w75 {
  width: 75%;
}
.w67 {
  width: 67%;
}
.w50 {
  width: 50%;
}
.w33 {
  width: 33%;
}
.w25 {
  width: 25%;
}
.hasLabelFrame {
  padding: 25px 0px 0px 0px;
}
.hasLabelFrame::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /*border: 2px solid #aaaaaa;*/
  /* border: 2px solid #fff; */
}
.hasLabelFrame::after {
  content: "Unranked (tied for last)";
  position: absolute;
  font-size: 20px;
  top: 0px;
  left: 10px;
  /* padding: 0 5px 0 5px; */
}
#rankeditems::after {
  content: "Ranked";
}
#electorate::after {
  content: "Electors";
}
#invites::after {
  content: "Invites";
}
/* cssremove1 */
.grabbable,
.grippy,
.grabby,
.cursorMoveGrab {
  cursor: move;
  cursor: grab;
  cursor: -moz-grab;
  cursor: -webkit-grab;
}
/* cssremove2 */

/*hide rankingTools box when dragging*/
li.gu-mirror > .rankingTools {
  display: none;
}

/* conditional hiding */
.hidden3,
.hidden2,
.hidden1,
.hidden {
  visibility: hidden;
  transition: visibility 0s linear 0s !important;
}

/* div[data-isNew="new"] .hidden1, */
/* ul li[data-isNew="new"] .hidden1 { */
.incrementsCounter .hidden1,
ol .hidden2:checked,
ol .hidden2:checked ~ .hidden3,
ol li:hover .hidden2 {
  visibility: visible;
}
.display_none_1 {
  display: none;
}
div[data-isNew="new"] .display_none_1 {
  display: inline-block;
}

/* rank counting (FUNCTIONAL) */
/* increment the rank with each candidate by default */
.incrementsCounter > * {
  counter-increment: rank;
}
/* do not increment the rank for gu-transit items that fall after a tied item, nor the ranks for items within a tie that fall after a gu-transit item, since they might not be coming from a tie */
.incrementsCounter > [data-tie] + .gu-transit,
.incrementsCounter > .gu-transit + [data-tie="middle"],
.incrementsCounter > .gu-transit + [data-tie="end"],
.incrementsCounter > [data-tie] + [data-tie] {
  counter-increment: none;
}
.incrementsCounter > [data-tie] + [data-tie="start"]:not(.gu-transit),
/* increment the rank for gu-transit items that fall right after the end of a tie */
.incrementsCounter > [data-tie="end"] + .gu-transit {
  counter-increment: rank;
}
/* actually show the count */
.orderdisplay::before {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}
.incrementsCounter .orderdisplay::before {
  content: counter(rank);
}

/* other stuff */
.label0,
/* label, */
input,
.button1Item,
.details,
.textInput1,
.text3,
button,
input[type=submit],
.clickable1,
.clickable2,
.button1 a,
a.button1,
a {
  text-decoration: none;
  font-size: 20px;
  padding: 10px;
  margin: 0 2px 0 2px;
  border-radius: .15em;
  transition: all .25s;
}
.electionName {
  /*height: 100%;*/
  width: 50%;
  text-align: left;
}
.leftMenu {
  width: 50%;
  text-align: left;
}
.rightMenu {
  width: 50%;
  text-align: right;
}
#topNav .icon,
#topNav img {
  height: 33px;
  width: 30.5px;
  vertical-align: bottom;
  padding: 5px;
}
#topNav .parrot {
  padding: 0;
}
.rightMenu > div {
  font-size: 20px;
  padding: 5px;
}
.leftMenu a {
  margin: 0 3px 0 0;
  border-radius: 6px 6px 0 0;
  padding: 5px;
}
.rightMenu a {
  margin: 2px 0 2px 0;
  border-radius: 6px;
  padding: 3px 5px 3px 5px;
}

/* revamp */
.text1square {
  height: 41px;
  width: 41px;
  line-height: 41px;
  vertical-align: top;
}
.text2,
.font15 {
  font-size: 15px;
}
.grabbable,
.text1square,
.text1,
.font20 {
  font-size: 20px;
}
.text4,
.font16 {
  font-size: 16px;
}
.text4 {
  border-radius: 10px;
}
/* .grabbable, */
.text1,
.padding10 {
  padding: 10px;
}
.text4,
.padding-sides-small {
  padding: 0px 5px 0px 5px;
}
.padding-top-med {
  padding: 15px 0px 0px 0px;
}
.text2,
.paddingTop4 {
  padding: 4px 0px 0px 0px;
}
.text2,
.text1,
.textLeft {
  text-align: left;
}
.textRight {
  text-align: right;
}
.text1square,
.textCenter {
  text-align: center;
}
.a1,
.underline {
  text-decoration: underline;
}
.row2 {
  margin: 0px 0px 4px 0px;
}
.row2:last-child {
  margin: 0;
}
.row1,
.margin4p0p4p0p {
  margin: 4px 0px 4px 0px;
}
.marginB1 {
  margin: 0px 0px 6px 0px;
}
.marginR1 {
  margin: 0px 6px 0px 0px;
}
.row-spacing1 {
  border-spacing: 0px 8px;
}
.table {
  display: table;
  table-layout: fixed;
  /* border-collapse: collapse; */
}
.table > * {
  display: table-row;
}
.table > * > * {
  display: table-cell;
}
.textInput1 {
  border-bottom: 1px solid white;
  /* border-left: 1px solid white; */
  font-weight: 200;
}
.textInput1::selection {
  background-color: #ff876d;
}
.textInput1:hover,
.textInput1:focus {
  border-color: #ff876d;
  outline: none;
}
.textInput1::-webkit-input-placeholder { /* Chrome */
  color: white;
  opacity: .85
}
.textInput1:-ms-input-placeholder { /* IE 10+ */
  color: white;
  opacity: .85
}
.textInput1::-moz-placeholder { /* Firefox 19+ */
  color: white;
  opacity: .85
}
.textInput1:-moz-placeholder { /* Firefox 4 - 18 */
  color: white;
  opacity: .85
}

/* custom checkbox adapted from https://www.w3schools.com/howto/howto_css_custom_checkbox.asp */
.checkbox0 {
  display: none;
}
/* Create a custom checkbox */
.checkboxUI0 {
  background-color: #eee;
  width: 16px;
  height: 16px;
  line-height: 16px;
  font-size: 16px;
}
/* On mouse-over, add a grey background color */
.checkboxUI0:hover {
  background-color: #ccc;
}
/* When the checkbox is checked, add a blue background */
[type=checkbox]:checked + .checkboxUI0 {
  background-color: #2196F3;
}
/* Create the checkmark/indicator (hidden when not checked) */
.checkboxUI0:after {
  content: "";
  position: absolute;
  display: none;
  left: 35%;
  top: 10%;
  width: 25%;
  height: 50%;
  border: solid white;
  border-width: 0 2px 2px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}
/* Show the checkmark when checked */
[type=checkbox]:checked ~ .checkboxUI0:after {
  display: block;
}
